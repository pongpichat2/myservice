"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const Lint = require("tslint");
const tsutils = require("tsutils");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const support_1 = require("../support");
const mutatorRegExp = /^(fill|reverse|sort)$/;
const creatorRegExp = /^(concat|entries|filter|keys|map|slice|splice|values)$/;
class Rule extends Lint.Rules.TypedRule {
    applyWithProgram(sourceFile, program) {
        const failures = [];
        const typeChecker = program.getTypeChecker();
        const identifiers = tsquery_1.tsquery(sourceFile, `CallExpression PropertyAccessExpression Identifier[name=${mutatorRegExp.toString()}]`);
        identifiers.forEach((node) => {
            const identifier = node;
            const propertyAccessExpression = identifier.parent;
            const callExpression = identifier.parent.parent;
            const parent = callExpression.parent;
            if (!tsutils.isExpressionStatement(parent)) {
                const type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
                if (support_1.couldBeType(type, "Array") &&
                    this.mutatesReferencedArray(callExpression)) {
                    failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, this.ruleName));
                }
            }
        });
        return failures;
    }
    mutatesReferencedArray(callExpression) {
        if (tsutils.isPropertyAccessExpression(callExpression.expression)) {
            const propertyAccessExpression = callExpression.expression;
            const { expression, name } = propertyAccessExpression;
            if (creatorRegExp.test(name.getText())) {
                return false;
            }
            if (tsutils.isCallExpression(expression)) {
                return this.mutatesReferencedArray(expression);
            }
            if (tsutils.isArrayLiteralExpression(expression)) {
                return false;
            }
        }
        return true;
    }
}
exports.Rule = Rule;
Rule.metadata = {
    description: "Disallows the assignment of returned, mutated arrays.",
    options: null,
    optionsDescription: "Not configurable.",
    requiresTypeInfo: true,
    ruleName: "no-assign-mutated-array",
    type: "functionality",
    typescriptOnly: true,
};
Rule.FAILURE_STRING = "Assignment of mutated arrays is forbidden";
