"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var advice_1 = require("../core/advice");
var BeforeAdvice = /** @class */ (function (_super) {
    __extends(BeforeAdvice, _super);
    function BeforeAdvice() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BeforeAdvice.prototype.apply = function (target, metadata) {
        this.advice.bind(this.context, metadata).apply(null, metadata.method.args);
        this.invoke(target, metadata);
        return metadata.method.result;
    };
    return BeforeAdvice;
}(advice_1.Advice));
exports.BeforeAdvice = BeforeAdvice;
var AfterAdvice = /** @class */ (function (_super) {
    __extends(AfterAdvice, _super);
    function AfterAdvice() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AfterAdvice.prototype.apply = function (target, metadata) {
        this.invoke(target, metadata);
        this.advice.bind(this.context, metadata).apply(null, metadata.method.args);
        return metadata.method.result;
    };
    return AfterAdvice;
}(advice_1.Advice));
exports.AfterAdvice = AfterAdvice;
var AroundAdvice = /** @class */ (function (_super) {
    __extends(AroundAdvice, _super);
    function AroundAdvice() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AroundAdvice.prototype.apply = function (target, metadata) {
        // if the user called metadata.method.complete(), then he's handling return value himself;
        // else he called metadata.method.invoke() & we'll handle it unless metadata.method.proceed is false
        var result = this.advice.bind(this.context, metadata).apply(null, metadata.method.args);
        if (metadata.method.proceed) {
            this.invoke(target, metadata);
            this.advice.bind(this.context, metadata).apply(null, metadata.method.args);
        }
        else {
            metadata.method.result = metadata.method.result || result;
        }
        return metadata.method.result;
    };
    return AroundAdvice;
}(advice_1.Advice));
exports.AroundAdvice = AroundAdvice;
var OnThrowAdvice = /** @class */ (function (_super) {
    __extends(OnThrowAdvice, _super);
    function OnThrowAdvice() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OnThrowAdvice.prototype.apply = function (target, metadata) {
        try {
            this.invoke(target, metadata);
        }
        catch (e) {
            metadata.method.exception = e;
            this.advice.bind(this.context, metadata).apply(null, metadata.method.args);
        }
        return metadata.method.result;
    };
    return OnThrowAdvice;
}(advice_1.Advice));
exports.OnThrowAdvice = OnThrowAdvice;
//# sourceMappingURL=sync_advices.js.map