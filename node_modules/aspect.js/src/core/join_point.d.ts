import { Advice } from './advice';
import { Metadata } from './metadata';
export interface Precondition {
    assert(data: any): boolean;
}
export declare abstract class JoinPoint {
    precondition: Precondition;
    constructor(precondition: Precondition);
    abstract match(descriptor: Function): string[];
    protected abstract getTarget(fn: Function): Object;
    protected abstract wrapTarget(target: Object, match: string, advice: Advice, advisedMetadata: any): void;
    apply({fn, matches, advisedMetadata}: {
        fn: Function;
        matches: string[];
        advisedMetadata: any;
    }, advice: Advice): void;
    protected getMetadata(className: string, key: string, fn: Function, args: IArguments, context: any, advisedMetadata: any): Metadata;
}
/**
 * Kept for backward compability only.
 * Use {@link JoinPoint} instead.
 *
 * @deprecated renamed to JoinPoint
 * @see JoinPoint
 */
export declare abstract class JointPoint extends JoinPoint {
    precondition: Precondition;
    constructor(precondition: Precondition);
}
