"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var metadata_1 = require("./metadata");
var JoinPoint = /** @class */ (function () {
    function JoinPoint(precondition) {
        this.precondition = precondition;
    }
    JoinPoint.prototype.apply = function (_a, advice) {
        var _this = this;
        var fn = _a.fn, matches = _a.matches, advisedMetadata = _a.advisedMetadata;
        var target = this.getTarget(fn);
        matches.forEach(function (match) {
            _this.wrapTarget(target, match, advice, advisedMetadata);
        });
    };
    JoinPoint.prototype.getMetadata = function (className, key, fn, args, context, advisedMetadata) {
        var boundFn = fn.bind(context);
        var invocation = {
            name: key,
            proceed: true,
            context: context,
            result: undefined,
            exception: undefined,
            args: undefined,
            invoke: boundFn,
            complete: function complete() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                this.method.proceed = false;
                return boundFn.apply(null, args);
            }
        };
        var metadata = new metadata_1.Metadata();
        metadata.method = invocation;
        metadata.className = className;
        metadata.advisedMetadata = advisedMetadata;
        if (args[0] && args[0].__advice_metadata__) {
            var previousMetadata = args[0];
            metadata.method.result = previousMetadata.method.result;
            metadata.method.proceed = previousMetadata.method.proceed;
            metadata.method.args = previousMetadata.method.args;
            metadata.method.context = previousMetadata.method.context;
        }
        else {
            metadata.method.args = Array.prototype.slice.call(args);
            metadata.method.complete = metadata.method.complete.bind(metadata);
        }
        return metadata;
    };
    return JoinPoint;
}());
exports.JoinPoint = JoinPoint;
/**
 * Kept for backward compability only.
 * Use {@link JoinPoint} instead.
 *
 * @deprecated renamed to JoinPoint
 * @see JoinPoint
 */
var JointPoint = /** @class */ (function (_super) {
    __extends(JointPoint, _super);
    function JointPoint(precondition) {
        var _this = _super.call(this, precondition) || this;
        _this.precondition = precondition;
        return _this;
    }
    return JointPoint;
}(JoinPoint));
exports.JointPoint = JointPoint;
//# sourceMappingURL=join_point.js.map