"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var advised_1 = require("../core/advised");
var MethodPrecondition = /** @class */ (function () {
    function MethodPrecondition(selector) {
        this.selector = selector;
        // Automatically weave classes
        var classes = selector.classes || [];
        for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {
            var c = classes_1[_i];
            advised_1.weave(c);
        }
    }
    MethodPrecondition.prototype.assert = function (_a) {
        var classDefinition = _a.classDefinition, methodName = _a.methodName;
        var s = this.selector;
        var className = classDefinition.name;
        var matchClass = (!s.classNamePattern && !s.classes) ||
            (s.classNamePattern && s.classNamePattern.test(className)) ||
            (s.classes && s.classes.some(function (c) { return c === classDefinition; }));
        if (!matchClass) {
            return false;
        }
        return !!((!s.methodNamePattern && !s.methods) ||
            (s.methodNamePattern && s.methodNamePattern.test(methodName)) ||
            (s.methods && s.methods.some(function (m) { return classDefinition.prototype[methodName] === m; })));
    };
    return MethodPrecondition;
}());
exports.MethodPrecondition = MethodPrecondition;
var MemberPrecondition = /** @class */ (function () {
    function MemberPrecondition(selector) {
        this.selector = selector;
    }
    MemberPrecondition.prototype.assert = function (_a) {
        var classDefinition = _a.classDefinition, fieldName = _a.fieldName;
        var s = this.selector;
        var className = classDefinition.name;
        var matchClass = (!s.classNamePattern && !s.classes) ||
            (s.classNamePattern && s.classNamePattern.test(className)) ||
            (s.classes && s.classes.some(function (c) { return c === classDefinition; }));
        if (!matchClass) {
            return false;
        }
        var d = Object.getOwnPropertyDescriptor(classDefinition.prototype, fieldName);
        return !!((!s.propertyNamePattern && !s.properties) ||
            (s.propertyNamePattern && s.propertyNamePattern.test(fieldName)) ||
            (s.properties &&
                s.properties.some(function (f) {
                    if (!f) {
                        throw new Error('Got invalid property descriptor for a member selector. Use Object.getOwnPropertyDescriptor(fn.prototype, name) if you are using field selectors.');
                    }
                    return d && (d.get === f.get && d.set === f.set);
                })));
    };
    return MemberPrecondition;
}());
exports.MemberPrecondition = MemberPrecondition;
//# sourceMappingURL=preconditions.js.map