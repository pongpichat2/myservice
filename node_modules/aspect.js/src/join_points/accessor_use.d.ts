import { JoinPoint, Precondition } from '../core/join_point';
import { Advice } from '../core/advice';
import { PropertySelector } from './selectors';
export declare type AccessorType = 'get' | 'set';
export declare class AccessorJoinPoint extends JoinPoint {
    protected type: AccessorType;
    constructor(precondition: Precondition, type: AccessorType);
    getTarget(fn: Function): Object;
    protected wrapTarget(proto: any, key: string, advice: Advice, advisedMetadata: any): void;
    match(target: Function): any[];
}
export declare function makeFieldGetAdviceDecorator(constr: new (...args: any[]) => Advice): (...selectors: PropertySelector[]) => MethodDecorator;
export declare function makeFieldSetAdviceDecorator(constr: new (...args: any[]) => Advice): (...selectors: PropertySelector[]) => MethodDecorator;
/**
 * Kept for backward compability only.
 * Use {@link AccessorJoinPoint} instead.
 *
 * @deprecated renamed to AccessorJoinPoint
 * @see AccessorJoinPoint
 */
export declare abstract class AccessorJointPoint extends AccessorJoinPoint {
    protected type: AccessorType;
    constructor(precondition: Precondition, type: AccessorType);
}
