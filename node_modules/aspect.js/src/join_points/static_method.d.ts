import { Precondition, JoinPoint } from '../core/join_point';
import { Advice } from '../core/advice';
import { MethodSelector } from './selectors';
export declare class StaticMethodJoinPoint extends JoinPoint {
    constructor(precondition: Precondition);
    getTarget(fn: Function): Object;
    match(target: Object): string[];
    protected wrapTarget(fn: any, key: string, advice: Advice, advisedMetadata: any): void;
}
export declare function makeStaticMethodAdviceDecorator(constr: any): (...selectors: MethodSelector[]) => MethodDecorator;
/**
 * Kept for backward compability only.
 * Use {@link StaticMethodJoinPoint} instead.
 *
 * @deprecated renamed to StaticMethodJoinPoint
 * @see StaticMethodJoinPoint
 */
export declare abstract class StaticMethodJointPoint extends StaticMethodJoinPoint {
    constructor(precondition: Precondition);
}
