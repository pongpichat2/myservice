import { Precondition, JoinPoint } from '../core/join_point';
import { Advice } from '../core/advice';
import { MethodSelector } from './selectors';
export declare class MethodCallJoinPoint extends JoinPoint {
    getTarget(fn: Function): any;
    match(target: Function): any[];
    protected wrapTarget(proto: {
        [key: string]: any;
    }, key: string, advice: Advice, advisedMetadata: any): void;
}
export declare function makeMethodCallAdviceDecorator(constr: any): (...selectors: MethodSelector[]) => MethodDecorator;
/**
 * Kept for backward compability only.
 * Use {@link MethodCallJoinPoint} instead.
 *
 * @deprecated renamed to MethodCallJoinPoint
 * @see MethodCallJoinPoint
 */
export declare abstract class MethodCallJointPoint extends MethodCallJoinPoint {
    constructor(precondition: Precondition);
}
