"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var join_point_1 = require("../core/join_point");
var pointcut_1 = require("../core/pointcut");
var aspect_1 = require("../core/aspect");
var preconditions_1 = require("./preconditions");
var StaticMethodJoinPoint = /** @class */ (function (_super) {
    __extends(StaticMethodJoinPoint, _super);
    function StaticMethodJoinPoint(precondition) {
        return _super.call(this, precondition) || this;
    }
    StaticMethodJoinPoint.prototype.getTarget = function (fn) {
        return fn;
    };
    StaticMethodJoinPoint.prototype.match = function (target) {
        var _this = this;
        var keys = Object.getOwnPropertyNames(target);
        var res = keys.filter(function (key) {
            var descriptor = Object.getOwnPropertyDescriptor(target, key);
            return (_this.precondition.assert({
                classDefinition: target,
                methodName: key
            }) && typeof descriptor.value === 'function');
        });
        return res;
    };
    StaticMethodJoinPoint.prototype.wrapTarget = function (fn, key, advice, advisedMetadata) {
        var className = fn.name;
        var bak = fn[key];
        var self = this;
        fn[key] = function () {
            var metadata = self.getMetadata(className, key, bak, arguments, this, advisedMetadata);
            return advice.apply(bak, metadata);
        };
        fn[key].__woven__ = true;
    };
    return StaticMethodJoinPoint;
}(join_point_1.JoinPoint));
exports.StaticMethodJoinPoint = StaticMethodJoinPoint;
function makeStaticMethodAdviceDecorator(constr) {
    return function () {
        var selectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
        }
        return function (target, prop, descriptor) {
            var joinpoints = selectors.map(function (selector) {
                return new StaticMethodJoinPoint(new preconditions_1.MethodPrecondition(selector));
            });
            var pointcut = new pointcut_1.Pointcut();
            pointcut.advice = new constr(target, descriptor.value);
            pointcut.joinPoints = joinpoints;
            var aspectName = target.constructor.name;
            var aspect = aspect_1.AspectRegistry.get(aspectName) || new aspect_1.Aspect();
            aspect.pointcuts.push(pointcut);
            aspect_1.AspectRegistry.set(aspectName, aspect);
            aspect_1.Targets.forEach(function (_a) {
                var target = _a.target, config = _a.config;
                return aspect.apply(target, config);
            });
            return target;
        };
    };
}
exports.makeStaticMethodAdviceDecorator = makeStaticMethodAdviceDecorator;
/**
 * Kept for backward compability only.
 * Use {@link StaticMethodJoinPoint} instead.
 *
 * @deprecated renamed to StaticMethodJoinPoint
 * @see StaticMethodJoinPoint
 */
var StaticMethodJointPoint = /** @class */ (function (_super) {
    __extends(StaticMethodJointPoint, _super);
    function StaticMethodJointPoint(precondition) {
        return _super.call(this, precondition) || this;
    }
    return StaticMethodJointPoint;
}(StaticMethodJoinPoint));
exports.StaticMethodJointPoint = StaticMethodJointPoint;
//# sourceMappingURL=static_method.js.map