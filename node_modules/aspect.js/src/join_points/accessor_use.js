"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var join_point_1 = require("../core/join_point");
var pointcut_1 = require("../core/pointcut");
var aspect_1 = require("../core/aspect");
var preconditions_1 = require("./preconditions");
var AccessorJoinPoint = /** @class */ (function (_super) {
    __extends(AccessorJoinPoint, _super);
    function AccessorJoinPoint(precondition, type) {
        var _this = _super.call(this, precondition) || this;
        _this.type = type;
        return _this;
    }
    AccessorJoinPoint.prototype.getTarget = function (fn) {
        return fn.prototype;
    };
    AccessorJoinPoint.prototype.wrapTarget = function (proto, key, advice, advisedMetadata) {
        var className = proto.constructor.name;
        var self = this;
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        if ((this.type === 'get' || this.type === 'set') && typeof descriptor[this.type] === 'function') {
            var bak_1 = descriptor[this.type];
            descriptor[this.type] = function () {
                var metadata = self.getMetadata(className, key, bak_1, arguments, this, advisedMetadata);
                return advice.apply(bak_1, metadata);
            };
            descriptor[this.type]['__woven__'] = true;
            Object.defineProperty(proto, key, descriptor);
        }
    };
    AccessorJoinPoint.prototype.match = function (target) {
        var _this = this;
        var keys = Object.getOwnPropertyNames(target.prototype);
        var res = keys
            .map(function (key) {
            var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);
            if (_this.precondition.assert({ classDefinition: target, fieldName: key }) &&
                (_this.type === 'get' || (_this.type === 'set' && typeof descriptor[_this.type] === 'function'))) {
                return key;
            }
            return false;
        })
            .filter(function (val) { return !!val; });
        return res;
    };
    return AccessorJoinPoint;
}(join_point_1.JoinPoint));
exports.AccessorJoinPoint = AccessorJoinPoint;
function makeFieldGetAdviceDecorator(constr) {
    return function () {
        var selectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
        }
        return function (target, prop, descriptor) {
            var joinpoints = selectors.map(function (selector) {
                return new AccessorJoinPoint(new preconditions_1.MemberPrecondition(selector), 'get');
            });
            var pointcut = new pointcut_1.Pointcut();
            pointcut.advice = new constr(target, descriptor.value);
            pointcut.joinPoints = joinpoints;
            var aspectName = target.constructor.name;
            var aspect = aspect_1.AspectRegistry.get(aspectName) || new aspect_1.Aspect();
            aspect.pointcuts.push(pointcut);
            aspect_1.AspectRegistry.set(aspectName, aspect);
            return target;
        };
    };
}
exports.makeFieldGetAdviceDecorator = makeFieldGetAdviceDecorator;
function makeFieldSetAdviceDecorator(constr) {
    return function () {
        var selectors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selectors[_i] = arguments[_i];
        }
        return function (target, prop, descriptor) {
            var joinpoints = selectors.map(function (selector) {
                return new AccessorJoinPoint(new preconditions_1.MemberPrecondition(selector), 'set');
            });
            var pointcut = new pointcut_1.Pointcut();
            pointcut.advice = new constr(target, descriptor.value);
            pointcut.joinPoints = joinpoints;
            var aspectName = target.constructor.name;
            var aspect = aspect_1.AspectRegistry.get(aspectName) || new aspect_1.Aspect();
            aspect.pointcuts.push(pointcut);
            aspect_1.AspectRegistry.set(aspectName, aspect);
            aspect_1.Targets.forEach(function (_a) {
                var target = _a.target, config = _a.config;
                return aspect.apply(target, config);
            });
            return target;
        };
    };
}
exports.makeFieldSetAdviceDecorator = makeFieldSetAdviceDecorator;
/**
 * Kept for backward compability only.
 * Use {@link AccessorJoinPoint} instead.
 *
 * @deprecated renamed to AccessorJoinPoint
 * @see AccessorJoinPoint
 */
var AccessorJointPoint = /** @class */ (function (_super) {
    __extends(AccessorJointPoint, _super);
    function AccessorJointPoint(precondition, type) {
        var _this = _super.call(this, precondition, type) || this;
        _this.type = type;
        return _this;
    }
    return AccessorJointPoint;
}(AccessorJoinPoint));
exports.AccessorJointPoint = AccessorJointPoint;
//# sourceMappingURL=accessor_use.js.map